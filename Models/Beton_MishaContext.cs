// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Desctop.Models
{
    public partial class Beton_MishaContext : DbContext
    {
        public Beton_MishaContext()
        {
        }

        public Beton_MishaContext(DbContextOptions<Beton_MishaContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Citi> Citi { get; set; }
        public virtual DbSet<Discount> Discount { get; set; }
        public virtual DbSet<Good> Good { get; set; }
        public virtual DbSet<Goods_in_stocks> Goods_in_stocks { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<Order_status> Order_status { get; set; }
        public virtual DbSet<Payment_method> Payment_method { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Stock> Stock { get; set; }
        public virtual DbSet<Supplier> Supplier { get; set; }
        public virtual DbSet<Supply> Supply { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Сategory> Сategory { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=localhost;Initial Catalog=Beton_Misha;Integrated Security=True;Encrypt=false");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Citi>(entity =>
            {
                entity.HasKey(e => e.Id_cities);

                entity.Property(e => e.Id_cities).ValueGeneratedNever();

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Discount>(entity =>
            {
                entity.HasKey(e => e.Id_discounts);

                entity.Property(e => e.Id_discounts).ValueGeneratedNever();
            });

            modelBuilder.Entity<Good>(entity =>
            {
                entity.HasKey(e => e.Id_goods);

                entity.Property(e => e.Id_goods).ValueGeneratedNever();

                entity.Property(e => e.Price_per_centner).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.description)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.picture)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.HasOne(d => d.Id_categoryNavigation)
                    .WithMany(p => p.Good)
                    .HasForeignKey(d => d.Id_category)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Good_Сategory");
            });

            modelBuilder.Entity<Goods_in_stocks>(entity =>
            {
                entity.HasKey(e => new { e.Id_stocks, e.Id_goods });

                entity.HasOne(d => d.Id_goodsNavigation)
                    .WithMany(p => p.Goods_in_stocks)
                    .HasForeignKey(d => d.Id_goods)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Goods_in_stocks_Good");

                entity.HasOne(d => d.Id_stocksNavigation)
                    .WithMany(p => p.Goods_in_stocks)
                    .HasForeignKey(d => d.Id_stocks)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Goods_in_stocks_Stock");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasKey(e => e.Id_order);

                entity.Property(e => e.Id_order).ValueGeneratedNever();

                entity.Property(e => e.total_coast).HasColumnType("decimal(10, 2)");

                entity.HasOne(d => d.Id_discountsNavigation)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.Id_discounts)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Discount");

                entity.HasOne(d => d.Id_goodsNavigation)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.Id_goods)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Good");

                entity.HasOne(d => d.Id_order_statusNavigation)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.Id_order_status)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Order_status");

                entity.HasOne(d => d.Id_payment_methodNavigation)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.Id_payment_method)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Payment_method");

                entity.HasOne(d => d.Id_stoksNavigation)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.Id_stoks)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Stock");

                entity.HasOne(d => d.Id_usersNavigation)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.Id_users)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_User");
            });

            modelBuilder.Entity<Order_status>(entity =>
            {
                entity.HasKey(e => e.Id_order_status);

                entity.Property(e => e.Id_order_status).ValueGeneratedNever();

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Payment_method>(entity =>
            {
                entity.HasKey(e => e.Id_Payment_method);

                entity.Property(e => e.Id_Payment_method).ValueGeneratedNever();

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasKey(e => e.Id_role);

                entity.Property(e => e.Id_role).ValueGeneratedNever();

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<Stock>(entity =>
            {
                entity.HasKey(e => e.Id_stocks);

                entity.Property(e => e.Id_stocks).ValueGeneratedNever();

                entity.Property(e => e.building)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.house)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.street)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Id_citiesNavigation)
                    .WithMany(p => p.Stock)
                    .HasForeignKey(d => d.Id_cities)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stock_Citi");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.HasKey(e => e.Id_suppliers);

                entity.Property(e => e.Id_suppliers).ValueGeneratedNever();

                entity.Property(e => e.phone_namber)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.HasOne(d => d.Id_citiesNavigation)
                    .WithMany(p => p.Supplier)
                    .HasForeignKey(d => d.Id_cities)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supplier_Citi");
            });

            modelBuilder.Entity<Supply>(entity =>
            {
                entity.HasKey(e => e.Id_supplies);

                entity.Property(e => e.Id_supplies).ValueGeneratedNever();

                entity.Property(e => e.total_coast).HasColumnType("decimal(10, 2)");

                entity.HasOne(d => d.Id_goodsNavigation)
                    .WithMany(p => p.Supply)
                    .HasForeignKey(d => d.Id_goods)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supply_Good");

                entity.HasOne(d => d.Id_stocksNavigation)
                    .WithMany(p => p.Supply)
                    .HasForeignKey(d => d.Id_stocks)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supply_Stock");

                entity.HasOne(d => d.Id_suppliersNavigation)
                    .WithMany(p => p.Supply)
                    .HasForeignKey(d => d.Id_suppliers)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supply_Supplier");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.Id_users);

                entity.Property(e => e.login)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.name).HasMaxLength(15);

                entity.Property(e => e.password)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.patronymic).HasMaxLength(20);

                entity.Property(e => e.phone_namber).HasMaxLength(15);

                entity.Property(e => e.surname).HasMaxLength(15);

                entity.HasOne(d => d.Id_rolesNavigation)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.Id_roles)
                    .HasConstraintName("FK_User_Role");
            });

            modelBuilder.Entity<Сategory>(entity =>
            {
                entity.HasKey(e => e.Id_category);

                entity.Property(e => e.Id_category).ValueGeneratedNever();

                entity.Property(e => e.title)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}